#!/bin/bash

# Function to encrypt keystrokes using Caesar cipher
caesar_cipher() {
    local text=$1
    local shift=$2
    local encrypted_text=""

    for (( i=0; i<${#text}; i++ )); do
        local char="${text:$i:1}"
        local ascii_val=$(printf "%d" "'$char'")
        
        # Check if the character is an uppercase letter
        if [[ "$char" =~ [A-Z] ]]; then
            encrypted_text+="$(printf \\$(printf '03o' $(( (ascii_val - 65 + shift) % 26 + 65 ))))"
        # Check if the character is a lowercase letter
        elif [[ "$char" =~ [a-z] ]]; then
            encrypted_text+="$(printf \\$(printf '03o' $(( (ascii_val - 97 + shift) % 26 + 97 ))))"
        else
            encrypted_text+="$char"  # Keep non-alphabetic characters as is
        fi
    done
    
    echo "$encrypted_text"
}

# Generate a random shift value between 1 and 25
shift=$(shuf -i 1-25 -n 1)

# Run the script indefinitely, changing the keystrokes every 5 minutes
while true; do
    read -rsn1 input_char
    encrypted_char=$(caesar_cipher "$input_char" "$shift")
    printf "%s" "$encrypted_char"
    sleep 5m
done
